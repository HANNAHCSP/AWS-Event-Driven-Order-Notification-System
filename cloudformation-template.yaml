AWSTemplateFormatVersion: "2010-09-09"
Description: "Event-Driven Order Notification System"

Resources:
  # DynamoDB Table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH

  # SNS Topic
  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic

  # Dead Letter Queue
  OrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderDLQ
      MessageRetentionPeriod: 1209600 # 14 days

  # Main Queue
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600 # 4 days
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt: [OrderDLQ, Arn]
        maxReceiveCount: 3

  # Queue Policy to allow SNS to send messages to SQS
  OrderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: OrderQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource:
              Fn::GetAtt: [OrderQueue, Arn]
            Condition:
              ArnEquals:
                "aws:SourceArn":
                  Ref: OrderTopic

  # SNS Subscription
  OrderSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: OrderTopic
      Protocol: sqs
      Endpoint:
        Fn::GetAtt: [OrderQueue, Arn]
      RawMessageDelivery: true

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"

  # Lambda Function
  OrderProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessor
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Timeout: 30
      Code:
        ZipFile: |
          import json
           import boto3
                 from datetime import datetime

                 dynamodb = boto3.resource('dynamodb')
                 orders_table = dynamodb.Table('orders')

                 def lambda_handler(event, context):
                     print("Received event: " + json.dumps(event, default=str))
                     
                     for record in event['Records']:
                         try:
                             message_body = record['body']
                             try:
                                 order_data = json.loads(message_body)
                                 if isinstance(order_data, dict) and 'Message' in order_data:
                                     order_data = json.loads(order_data['Message'])
                             except json.JSONDecodeError:
                                 print("Message is not valid JSON, using as-is")
                                 order_data = {
                                     'orderId': "ERROR-" + datetime.utcnow().isoformat(),
                                     'error': 'Invalid JSON format',
                                     'rawMessage': message_body
                                 }
                             
                             print("Processing order: " + json.dumps(order_data, default=str))
                             validate_order_data(order_data)
                             response = store_order(order_data)
                             print("Successfully processed order: " + order_data.get('orderId', 'UNKNOWN'))
                             print("DynamoDB response: " + json.dumps(response, default=str))
                             
                         except Exception as e:
                             print("Error processing message: " + str(e))
                             import traceback
                             print(traceback.format_exc())
                     
                     return {
                         'statusCode': 200,
                         'body': json.dumps('Order processing complete')
                     }

                 def validate_order_data(order_data):
                     required_fields = ['orderId']
                     for field in required_fields:
                         if field not in order_data:
                             raise ValueError("Required field '{}' missing in order data".format(field))

                 def store_order(order_data):
                     if 'timestamp' not in order_data:
                         order_data['timestamp'] = datetime.utcnow().isoformat()
                     response = orders_table.put_item(Item=order_data)
                     return response

  # Lambda Event Source Mapping (SQS Trigger)
  OrderQueueTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt: [OrderQueue, Arn]
      FunctionName:
        Fn::GetAtt: [OrderProcessorFunction, Arn]

Outputs:
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value:
      Ref: OrdersTable
  SNSTopicARN:
    Description: ARN of the SNS topic
    Value:
      Ref: OrderTopic
  SQSQueueURL:
    Description: URL of the SQS queue
    Value:
      Ref: OrderQueue
  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value:
      Fn::GetAtt: [OrderProcessorFunction, Arn]
